from keyboards import inline as inline_keyboard
from loader import bot
from request_to_api.habits_api import request_to_get_all_active_habits
from telebot.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)


@bot.message_handler(commands=["list_habits"])
def show_list_habits(message: Message, edit: bool = False) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    :param message: –∫–æ–º–∞–Ω–¥–∞ /list_habits
    :param edit: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False
    :return: None
    """
    if edit:
        user_tg_id = message.chat.id
    else:
        user_tg_id = message.from_user.id
    response = request_to_get_all_active_habits(user_tg_id=user_tg_id)
    if response:
        response = [
            {"text": i_btn["name"], "callback_data": "habit_" + str(i_btn["id"])}
            for i_btn in response
        ]
        text = "–í–∞—à–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: "
        markup = inline_keyboard.gen_inline_markup(response)
        if edit:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message.message_id,
                text=text,
                reply_markup=markup,
            )
        else:
            bot.send_message(
                message.from_user.id,
                text=text,
                reply_markup=markup,
            )
    else:
        text = "*–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏*"
        if edit:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message.message_id,
                text=text,
                parse_mode="Markdown",
            )
        else:
            bot.send_message(
                message.from_user.id,
                text,
                parse_mode="Markdown",
            )


@bot.callback_query_handler(
    func=lambda callback_query: (callback_query.data.startswith("habit_"))
)
def handle_habit_selection(callback_query: CallbackQuery, edit: bool = False) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–≤—ã—á–∫–æ–π
    :param callback_query: –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è –Ω–∞ habit_ –∏–ª–∏ back_to_crud_
    :param edit: –ï—Å–ª–∏ True - —Ç–æ –∑–Ω–∞—á–∏—Ç id –±—É–¥–µ—Ç –ª–µ–∂–∞—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É 3, –∏–Ω–∞—á–µ 1
    :return: None
    """
    if edit:
        habit_id = callback_query.data.split("_")[3]
    else:
        habit_id = callback_query.data.split("_")[1]
    actions_keyboard = InlineKeyboardMarkup(row_width=2)
    actions_keyboard.add(
        InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"description_{habit_id}"),
        InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{habit_id}"),
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{habit_id}"),
        InlineKeyboardButton(
            text="–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", callback_data=f"mark_{habit_id}"
        ),
        InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_list_habits"),
    )
    bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=actions_keyboard,
    )
