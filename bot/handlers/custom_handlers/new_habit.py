import datetime

from telebot.types import CallbackQuery, Message
from telegram_bot_calendar import LSTEP

from keyboards.reply import calendar_markup
from loader import bot
from request_to_api.habits_api import request_to_new_habit
from request_to_api.users_api import get_user_by_tg_id
from states.habit_info import HabitInfoState
from utils.calendar import MyStyleCalendar


@bot.message_handler(commands=["new_habit"])
def new_habit(message: Message) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    :param message: Message - –∫–æ–º–∞–Ω–¥–∞ /new_habit
    :return: None
    """
    bot.set_state(message.from_user.id, HabitInfoState.name, message.chat.id)
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –ø—Ä–∏–≤—ã—á–∫–∏: ")


@bot.message_handler(state=HabitInfoState.name)
def get_name(message: Message) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    :param message: Message - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    :return: None
    """
    if not message.text.isdigit():
        bot.send_message(message.from_user.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ")
        bot.set_state(message.from_user.id, HabitInfoState.description, message.chat.id)

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["name"] = message.text
    else:
        bot.send_message(
            message.from_user.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!"
        )


@bot.message_handler(state=HabitInfoState.description)
def get_description(message: Message) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    :param message: Message - –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    :return: None
    """
    bot.send_message(
        message.from_user.id,
        "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏ (–Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 21 –¥–Ω—è): ",
    )
    bot.set_state(message.from_user.id, HabitInfoState.target_days, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["description"] = message.text


@bot.message_handler(state=HabitInfoState.target_days)
def get_target_days(message: Message) -> None:
    """
    –ö–∞–∫–∞—è —Ü–µ–ª—å –ø–æ –¥–Ω—è–º
    :param message: Message - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    :return: None
    """
    bot.send_message(
        message.from_user.id,
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∑–∞–ø–∏—Å–∞–ª! –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ ",
        reply_markup=calendar_markup(),
    )
    bot.set_state(message.from_user.id, HabitInfoState.start_date, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["target_days"] = message.text


@bot.callback_query_handler(
    state=HabitInfoState.start_date, func=MyStyleCalendar.func(calendar_id=1)
)
def get_start_date(message: CallbackQuery) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    :param message: CallbackQuery - –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
    :return: None
    """
    result, key, step = MyStyleCalendar(
        calendar_id=1, min_date=datetime.date.today()
    ).process(message.data)
    if not result and key:
        bot.edit_message_text(
            f"Select {LSTEP[step]}",
            message.message.chat.id,
            message.message.message_id,
            reply_markup=key,
        )
    elif result:
        with bot.retrieve_data(message.from_user.id) as data:
            data["start_date"] = result.isoformat()
            data["user_id"] = get_user_by_tg_id(message.from_user.id).get("id")
            bot.edit_message_text(
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {result}",
                message.message.chat.id,
                message.message.message_id,
            )
        response = request_to_new_habit(data)
        if response:
            text = (
                "\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}"
                "\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}"
                "\n*–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:* {start}"
                "\n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {target_days}"
            ).format(
                name=data.get("name"),
                description=data.get("description"),
                target_days=data.get("target_days"),
                start=result.isoformat(),
            )
            bot.send_message(message.from_user.id, "–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!üëç")
        else:
            text = "–û—à–∏–±–∫–∞"
        bot.send_message(message.from_user.id, text, parse_mode="Markdown")
