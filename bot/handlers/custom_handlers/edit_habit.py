from telebot.types import CallbackQuery, Message

from keyboards import inline as inline_keyboard
from loader import bot
from request_to_api.habits_api import (
    request_to_get_habit_by_id, request_to_update_habit_by_id,
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ FSM –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
user_habit_edit_state = {}  # user_id: habit_id


@bot.callback_query_handler(
    func=lambda callback_query: (callback_query.data.startswith("edit_"))
)
def handle_edit_habit(callback_query: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    :param callback_query: CallbackQuery - –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 'edit_'
    :return: None
    """
    habit_id = int(callback_query.data.split("_")[1])
    buttons = [
        {"text": "–ù–∞–∑–≤–∞–Ω–∏–µ", "callback_data": "update_name_" + str(habit_id)},
        {"text": "–û–ø–∏—Å–∞–Ω–∏–µ", "callback_data": "update_description_" + str(habit_id)},
        {"text": "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "callback_data": "update_start_date_" + str(habit_id)},
        {"text": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "callback_data": "update_target_days_" + str(habit_id)},
        {"text": "üîô–ù–∞–∑–∞–¥", "callback_data": "back_to_crud_" + str(habit_id)},
    ]
    bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        reply_markup=inline_keyboard.gen_inline_markup(buttons=buttons, row_width=1),
    )


@bot.callback_query_handler(
    func=lambda callback_query: (callback_query.data.startswith("update_name_"))
)
def handle_edit_name_habit(callback_query: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    :param callback_query: CallbackQuery - –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 'edit_name_'
    :return: None
    """
    habit_id = int(callback_query.data.split("_")[2])
    user_id = callback_query.from_user.id
    habit = request_to_get_habit_by_id(habit_id)
    user_habit_edit_state[user_id] = habit_id

    text = f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: *{habit['name']}*\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    buttons = [{"text": "–û—Ç–º–µ–Ω–∞", "callback_data": "edit_" + str(habit_id)}]
    markup = inline_keyboard.gen_inline_markup(buttons=buttons, row_width=1)

    bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=markup,
        parse_mode="Markdown"
    )

    bot.register_next_step_handler_by_chat_id(
        callback_query.message.chat.id, process_new_habit_name
    )


def process_new_habit_name(message: Message) -> None:
    user_id = message.from_user.id
    if user_id not in user_habit_edit_state:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    new_name = {"name": message.text.strip()}

    result = request_to_update_habit_by_id(habit_id=user_habit_edit_state[user_id], fields=new_name)
    if result:
        bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: *{new_name.get('name')}*",
                         parse_mode="Markdown")
    else:
        bot.send_message(message.from_user.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è



